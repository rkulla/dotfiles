[user]
	name = Ryan Kulla
	email = rkulla@gmail.com
[core]
	editor = vim
	excludesfile = /Users/rkulla/.gitignore
[merge]
	tool = vimdiff
[color]
	ui = true
[color "status"]
    added = "#006400" bold
	changed = 34 italic
	untracked = blue bold
[color "diff"]
	meta = 23 bold
	frag = 21 bold
    func = 146 bold
	commit = yellow bold
    new = 34 bold
	old = red bold
	whitespace = red reverse
[color "diff-highlight"]
    # Used by diff-so-fancy (dsf)
    oldNormal = red bold
    oldHighlight = red bold reverse
    newNormal = 34 bold
    newHighlight = 34 bold reverse
[aliaS]
    # fancier diff with diff-so-fancy. I shell alias this to dsf='git dsf'
	dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
	s = status
	st = status
	co = checkout
	ci = commit
	rv = remote -v
	gap = add -p
	bi = bisect
	ds = diff --staged
	pa = log -S # pickaxe
    logp = log -p # shows actual code that changed, all the way to beginning. Add -1 for last commit, last -2 for 2 commits, etc.
    # Depending on the branch, start with lol, then lolg then lolga
    lol = log --pretty=format:\"%C(34 italic 16)%h%d%Creset %s - %an [%ar]\"
    lolg = "log --graph --pretty=format:'%C(34 italic 16)%h %C(green)%an %Cblue%ar%Creset%C(cyan)%d%Creset %C(black)%s %Creset' --author-date-order --decorate=short"
    lolga = "log --graph --pretty=format:'%C(34 italic 16)%h %C(green)%an %Cblue%ar%Creset%C(cyan)%d%Creset %C(black)%s %Creset' --author-date-order --decorate --all"
    # date as a full name, not relative time
    loldate = "log --graph --author-date-order --decorate=short --date=format:'%Y-%d-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(magenta bold)%ad%Creset%C(black)%d %s'"

    # GREAT command for figuring out what you or your team last changed and getting filenames easily
    # also use the awesome 'git changed --remotes' command to see remote branch changes too!
	changed = log --pretty=format:\"%C(34 italic 16)%h%d%Creset %s - %an [%ar]\" --name-only
    # like changed but also show the file modification. E.g. M for modified, A for added, etc.
    changedm = log --pretty=format:\"%C(34 italic 16)%h%d%Creset %s - %an [%ar]\" --name-status
	today = show --since=yesterday --stat
    last = show --stat
	lastmessage = cat-file commit HEAD  # Use this more though: git show
    # great for seeing changes in remote branches (compliments my git branches Golang command) and git changed --remotes
    branchez = "!git --no-pager branch -a -vv"
    # Remember `git clean -f` will remove untracked files (opposite of bonk). Use `git clean -f` to dry-run first!
    bonk = reset --hard  # so I can bonk HEAD to revert
    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"
    
[push]
	default = simple
[credential]
	helper = osxkeychain
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[mergetool]
	keepBackup = false
[pull]
	ff = only
[url "git@github.com:"]
	insteadOf = https://github.com/
[url "https://github.com/rust-lang/crates.io-index"]
    insteadOf = https://github.com/rust-lang/crates.io-index
[log]
	date = iso-strict
[init]
	defaultBranch = main
